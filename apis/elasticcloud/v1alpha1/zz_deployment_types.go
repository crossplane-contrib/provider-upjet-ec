/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ApmInitParameters struct {

	// APM settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Apm configuration options for the APM Server
	Config []ConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the APM resource. The default value main-apm is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []TopologyInitParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type ApmObservation struct {

	// APM settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Apm configuration options for the APM Server
	Config []ConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Kibana resource HTTP endpoint.
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// Kibana resource HTTPs endpoint.
	HTTPSEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint,omitempty"`

	// Can be set on the APM resource. The default value main-apm is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Kibana resource unique identifier.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []TopologyObservation `json:"topology,omitempty" tf:"topology,omitempty"`
}

type ApmParameters struct {

	// APM settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Apm configuration options for the APM Server
	// +kubebuilder:validation:Optional
	Config []ConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	// +kubebuilder:validation:Optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the APM resource. The default value main-apm is recommended.
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// +kubebuilder:validation:Optional
	Topology []TopologyParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type AutoscalingInitParameters struct {

	// Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
	// Maximum size value for the maximum autoscaling setting.
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// Defines the resource type the scale up will use (Defaults to "memory").
	// Maximum resource type for the maximum autoscaling setting.
	MaxSizeResource *string `json:"maxSizeResource,omitempty" tf:"max_size_resource,omitempty"`

	// Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
	// Minimum size value for the minimum autoscaling setting.
	MinSize *string `json:"minSize,omitempty" tf:"min_size,omitempty"`

	// Defines the resource type the scale down will use (Defaults to "memory").
	// Minimum resource type for the minimum autoscaling setting.
	MinSizeResource *string `json:"minSizeResource,omitempty" tf:"min_size_resource,omitempty"`
}

type AutoscalingObservation struct {

	// Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
	// Maximum size value for the maximum autoscaling setting.
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// Defines the resource type the scale up will use (Defaults to "memory").
	// Maximum resource type for the maximum autoscaling setting.
	MaxSizeResource *string `json:"maxSizeResource,omitempty" tf:"max_size_resource,omitempty"`

	// Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
	// Minimum size value for the minimum autoscaling setting.
	MinSize *string `json:"minSize,omitempty" tf:"min_size,omitempty"`

	// Defines the resource type the scale down will use (Defaults to "memory").
	// Minimum resource type for the minimum autoscaling setting.
	MinSizeResource *string `json:"minSizeResource,omitempty" tf:"min_size_resource,omitempty"`

	// Computed policy overrides set directly via the API or other clients.
	// Computed policy overrides set directly via the API or other clients.
	PolicyOverrideJSON *string `json:"policyOverrideJson,omitempty" tf:"policy_override_json,omitempty"`
}

type AutoscalingParameters struct {

	// Defines the maximum size the deployment will scale up to. When set, scaling up will be enabled. All tiers should support this option.
	// Maximum size value for the maximum autoscaling setting.
	// +kubebuilder:validation:Optional
	MaxSize *string `json:"maxSize,omitempty" tf:"max_size,omitempty"`

	// Defines the resource type the scale up will use (Defaults to "memory").
	// Maximum resource type for the maximum autoscaling setting.
	// +kubebuilder:validation:Optional
	MaxSizeResource *string `json:"maxSizeResource,omitempty" tf:"max_size_resource,omitempty"`

	// Defines the minimum size the deployment will scale down to. When set, scale down will be enabled, please note that not all the tiers support this option.
	// Minimum size value for the minimum autoscaling setting.
	// +kubebuilder:validation:Optional
	MinSize *string `json:"minSize,omitempty" tf:"min_size,omitempty"`

	// Defines the resource type the scale down will use (Defaults to "memory").
	// Minimum resource type for the minimum autoscaling setting.
	// +kubebuilder:validation:Optional
	MinSizeResource *string `json:"minSizeResource,omitempty" tf:"min_size_resource,omitempty"`
}

type ConfigInitParameters struct {

	// Enable debug mode for APM servers. Defaults to false.
	// Optionally enable debug mode for APM servers - defaults to false
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled,omitempty"`

	// Optionally override the docker image the APM nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level apm.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level apm.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level apm.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level apm.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type ConfigObservation struct {

	// Enable debug mode for APM servers. Defaults to false.
	// Optionally enable debug mode for APM servers - defaults to false
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled,omitempty"`

	// Optionally override the docker image the APM nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level apm.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level apm.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level apm.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level apm.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type ConfigParameters struct {

	// Enable debug mode for APM servers. Defaults to false.
	// Optionally enable debug mode for APM servers - defaults to false
	// +kubebuilder:validation:Optional
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled,omitempty"`

	// Optionally override the docker image the APM nodes will use. Note that this field will only work for internal users only.
	// +kubebuilder:validation:Optional
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level apm.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level apm.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level apm.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level apm.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type DeploymentInitParameters struct {

	// Deployment alias, affects the format of the resource URLs.
	// Optional deployment alias that affects the format of the resource URLs
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// DEPRECATED  APM instance definition, can only be specified once. It should only be used with deployments with a version prior to 8.0.0.
	// Optional APM resource definition
	Apm []ApmInitParameters `json:"apm,omitempty" tf:"apm,omitempty"`

	// Deployment template identifier to create the deployment from. See the full list of regions and deployment templates available in ESS.
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateID *string `json:"deploymentTemplateId,omitempty" tf:"deployment_template_id,omitempty"`

	// node Elasticsearch clusters, use multiple topology blocks.
	// Required Elasticsearch resource definition
	Elasticsearch []ElasticsearchInitParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// node Enterprise Search deployments, use multiple topology blocks.
	// Optional Enterprise Search resource definition
	EnterpriseSearch []EnterpriseSearchInitParameters `json:"enterpriseSearch,omitempty" tf:"enterprise_search,omitempty"`

	// Integrations Server instance definition, can only be specified once. It has replaced apm in stack version 8.0.0.
	// Optional Integrations Server resource definition
	IntegrationsServer []IntegrationsServerInitParameters `json:"integrationsServer,omitempty" tf:"integrations_server,omitempty"`

	// Kibana instance definition, can only be specified once.
	// Optional Kibana resource definition
	Kibana []KibanaInitParameters `json:"kibana,omitempty" tf:"kibana,omitempty"`

	// Name of the deployment.
	// Optional name for the deployment
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Observability settings that you can set to ship logs and metrics to a deployment. The target deployment can also be the current deployment itself.
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability []ObservabilityInitParameters `json:"observability,omitempty" tf:"observability,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Request ID to set when you create the deployment. Use it only when previous attempts return an error and request_id is returned as part of the error.
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a request_id is returned as part of the error
	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	// Key value map of arbitrary string tags.
	// Optional map of deployment tags
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// List of traffic filter rule identifiers that will be applied to the deployment.
	// Optional list of traffic filters to apply to this deployment.
	// +listType=set
	TrafficFilter []*string `json:"trafficFilter,omitempty" tf:"traffic_filter,omitempty"`

	// Elastic Stack version to use for all the deployment resources.
	// Required Elastic Stack version to use for all of the deployment resources
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DeploymentObservation struct {

	// Deployment alias, affects the format of the resource URLs.
	// Optional deployment alias that affects the format of the resource URLs
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// DEPRECATED  APM instance definition, can only be specified once. It should only be used with deployments with a version prior to 8.0.0.
	// Optional APM resource definition
	Apm []ApmObservation `json:"apm,omitempty" tf:"apm,omitempty"`

	// Deployment template identifier to create the deployment from. See the full list of regions and deployment templates available in ESS.
	// Required Deployment Template identifier to create the deployment from
	DeploymentTemplateID *string `json:"deploymentTemplateId,omitempty" tf:"deployment_template_id,omitempty"`

	// node Elasticsearch clusters, use multiple topology blocks.
	// Required Elasticsearch resource definition
	Elasticsearch []ElasticsearchObservation `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// Auto-generated Elasticsearch username.
	// Computed username obtained upon creating the Elasticsearch resource
	ElasticsearchUsername *string `json:"elasticsearchUsername,omitempty" tf:"elasticsearch_username,omitempty"`

	// node Enterprise Search deployments, use multiple topology blocks.
	// Optional Enterprise Search resource definition
	EnterpriseSearch []EnterpriseSearchObservation `json:"enterpriseSearch,omitempty" tf:"enterprise_search,omitempty"`

	// Deployment identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Integrations Server instance definition, can only be specified once. It has replaced apm in stack version 8.0.0.
	// Optional Integrations Server resource definition
	IntegrationsServer []IntegrationsServerObservation `json:"integrationsServer,omitempty" tf:"integrations_server,omitempty"`

	// Kibana instance definition, can only be specified once.
	// Optional Kibana resource definition
	Kibana []KibanaObservation `json:"kibana,omitempty" tf:"kibana,omitempty"`

	// Name of the deployment.
	// Optional name for the deployment
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Observability settings that you can set to ship logs and metrics to a deployment. The target deployment can also be the current deployment itself.
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	Observability []ObservabilityObservation `json:"observability,omitempty" tf:"observability,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Request ID to set when you create the deployment. Use it only when previous attempts return an error and request_id is returned as part of the error.
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a request_id is returned as part of the error
	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	// Key value map of arbitrary string tags.
	// Optional map of deployment tags
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// List of traffic filter rule identifiers that will be applied to the deployment.
	// Optional list of traffic filters to apply to this deployment.
	// +listType=set
	TrafficFilter []*string `json:"trafficFilter,omitempty" tf:"traffic_filter,omitempty"`

	// Elastic Stack version to use for all the deployment resources.
	// Required Elastic Stack version to use for all of the deployment resources
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type DeploymentParameters struct {

	// Deployment alias, affects the format of the resource URLs.
	// Optional deployment alias that affects the format of the resource URLs
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// DEPRECATED  APM instance definition, can only be specified once. It should only be used with deployments with a version prior to 8.0.0.
	// Optional APM resource definition
	// +kubebuilder:validation:Optional
	Apm []ApmParameters `json:"apm,omitempty" tf:"apm,omitempty"`

	// Deployment template identifier to create the deployment from. See the full list of regions and deployment templates available in ESS.
	// Required Deployment Template identifier to create the deployment from
	// +kubebuilder:validation:Optional
	DeploymentTemplateID *string `json:"deploymentTemplateId,omitempty" tf:"deployment_template_id,omitempty"`

	// node Elasticsearch clusters, use multiple topology blocks.
	// Required Elasticsearch resource definition
	// +kubebuilder:validation:Optional
	Elasticsearch []ElasticsearchParameters `json:"elasticsearch,omitempty" tf:"elasticsearch,omitempty"`

	// node Enterprise Search deployments, use multiple topology blocks.
	// Optional Enterprise Search resource definition
	// +kubebuilder:validation:Optional
	EnterpriseSearch []EnterpriseSearchParameters `json:"enterpriseSearch,omitempty" tf:"enterprise_search,omitempty"`

	// Integrations Server instance definition, can only be specified once. It has replaced apm in stack version 8.0.0.
	// Optional Integrations Server resource definition
	// +kubebuilder:validation:Optional
	IntegrationsServer []IntegrationsServerParameters `json:"integrationsServer,omitempty" tf:"integrations_server,omitempty"`

	// Kibana instance definition, can only be specified once.
	// Optional Kibana resource definition
	// +kubebuilder:validation:Optional
	Kibana []KibanaParameters `json:"kibana,omitempty" tf:"kibana,omitempty"`

	// Name of the deployment.
	// Optional name for the deployment
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Observability settings that you can set to ship logs and metrics to a deployment. The target deployment can also be the current deployment itself.
	// Optional observability settings. Ship logs and metrics to a dedicated deployment.
	// +kubebuilder:validation:Optional
	Observability []ObservabilityParameters `json:"observability,omitempty" tf:"observability,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	// Required ESS region where to create the deployment, for ECE environments "ece-region" must be set
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Request ID to set when you create the deployment. Use it only when previous attempts return an error and request_id is returned as part of the error.
	// Optional request_id to set on the create operation, only use when previous create attempts return with an error and a request_id is returned as part of the error
	// +kubebuilder:validation:Optional
	RequestID *string `json:"requestId,omitempty" tf:"request_id,omitempty"`

	// Key value map of arbitrary string tags.
	// Optional map of deployment tags
	// +kubebuilder:validation:Optional
	// +mapType=granular
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// List of traffic filter rule identifiers that will be applied to the deployment.
	// Optional list of traffic filters to apply to this deployment.
	// +kubebuilder:validation:Optional
	// +listType=set
	TrafficFilter []*string `json:"trafficFilter,omitempty" tf:"traffic_filter,omitempty"`

	// Elastic Stack version to use for all the deployment resources.
	// Required Elastic Stack version to use for all of the deployment resources
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ElasticsearchConfigInitParameters struct {

	// Optionally override the docker image the Elasticsearch nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and ecctl.
	// List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`

	// JSON-formatted user level elasticsearch.yml setting overrides.
	// JSON-formatted user level "elasticsearch.yml" setting overrides
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level elasticsearch.yml setting overrides.
	// JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level elasticsearch.yml setting overrides.
	// YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level elasticsearch.yml setting overrides.
	// YAML-formatted user level "elasticsearch.yml" setting overrides
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type ElasticsearchConfigObservation struct {

	// Optionally override the docker image the Elasticsearch nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and ecctl.
	// List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`

	// JSON-formatted user level elasticsearch.yml setting overrides.
	// JSON-formatted user level "elasticsearch.yml" setting overrides
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level elasticsearch.yml setting overrides.
	// JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level elasticsearch.yml setting overrides.
	// YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level elasticsearch.yml setting overrides.
	// YAML-formatted user level "elasticsearch.yml" setting overrides
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type ElasticsearchConfigParameters struct {

	// Optionally override the docker image the Elasticsearch nodes will use. Note that this field will only work for internal users only.
	// +kubebuilder:validation:Optional
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and ecctl.
	// List of Elasticsearch supported plugins, which vary from version to version. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and [ecctl](https://www.elastic.co/guide/en/ecctl/master/ecctl_stack_list.html)
	// +kubebuilder:validation:Optional
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`

	// JSON-formatted user level elasticsearch.yml setting overrides.
	// JSON-formatted user level "elasticsearch.yml" setting overrides
	// +kubebuilder:validation:Optional
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level elasticsearch.yml setting overrides.
	// JSON-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	// +kubebuilder:validation:Optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level elasticsearch.yml setting overrides.
	// YAML-formatted admin (ECE) level "elasticsearch.yml" setting overrides
	// +kubebuilder:validation:Optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level elasticsearch.yml setting overrides.
	// YAML-formatted user level "elasticsearch.yml" setting overrides
	// +kubebuilder:validation:Optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type ElasticsearchInitParameters struct {

	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	Autoscale *string `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// Elasticsearch settings applied to all topologies unless overridden in the topology element.
	// Optional Elasticsearch settings which will be applied to all topologies unless overridden on the topology element
	Config []ElasticsearchConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Custom Elasticsearch bundles or plugins. Can be set multiple times.
	// Optional Elasticsearch extensions such as custom bundles or plugins.
	Extension []ExtensionInitParameters `json:"extension,omitempty" tf:"extension,omitempty"`

	// Can be set on the Elasticsearch resource. The default value main-elasticsearch is recommended.
	// Optional ref_id to set on the Elasticsearch resource
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
	// Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
	RemoteCluster []RemoteClusterInitParameters `json:"remoteCluster,omitempty" tf:"remote_cluster,omitempty"`

	// Restores data from a snapshot of another deployment.
	// Optional snapshot source settings. Restore data from a snapshot of another deployment.
	SnapshotSource []SnapshotSourceInitParameters `json:"snapshotSource,omitempty" tf:"snapshot_source,omitempty"`

	// Choose the configuration strategy used to apply the changes.
	// Configuration strategy settings.
	Strategy []StrategyInitParameters `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// Optional topology element which must be set once but can be set multiple times to compose complex topologies
	Topology []ElasticsearchTopologyInitParameters `json:"topology,omitempty" tf:"topology,omitempty"`

	// The trust relationships with other ESS accounts.
	// Optional Elasticsearch account trust settings.
	TrustAccount []TrustAccountInitParameters `json:"trustAccount,omitempty" tf:"trust_account,omitempty"`

	// The trust relationship with external entities (remote environments, remote accounts...).
	// Optional Elasticsearch external trust settings.
	TrustExternal []TrustExternalInitParameters `json:"trustExternal,omitempty" tf:"trust_external,omitempty"`
}

type ElasticsearchObservation struct {

	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	Autoscale *string `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// Encoded Elasticsearch credentials to use in Beats or Logstash. For more information, see Configure Beats and Logstash with Cloud ID.
	// The encoded Elasticsearch credentials to use in Beats or Logstash
	CloudID *string `json:"cloudId,omitempty" tf:"cloud_id,omitempty"`

	// Elasticsearch settings applied to all topologies unless overridden in the topology element.
	// Optional Elasticsearch settings which will be applied to all topologies unless overridden on the topology element
	Config []ElasticsearchConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Custom Elasticsearch bundles or plugins. Can be set multiple times.
	// Optional Elasticsearch extensions such as custom bundles or plugins.
	Extension []ExtensionObservation `json:"extension,omitempty" tf:"extension,omitempty"`

	// Kibana resource HTTP endpoint.
	// The Elasticsearch resource HTTP endpoint
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// Kibana resource HTTPs endpoint.
	// The Elasticsearch resource HTTPs endpoint
	HTTPSEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint,omitempty"`

	// Can be set on the Elasticsearch resource. The default value main-elasticsearch is recommended.
	// Optional ref_id to set on the Elasticsearch resource
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	// The Elasticsearch resource region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
	// Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
	RemoteCluster []RemoteClusterObservation `json:"remoteCluster,omitempty" tf:"remote_cluster,omitempty"`

	// Kibana resource unique identifier.
	// The Elasticsearch resource unique identifier
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Restores data from a snapshot of another deployment.
	// Optional snapshot source settings. Restore data from a snapshot of another deployment.
	SnapshotSource []SnapshotSourceObservation `json:"snapshotSource,omitempty" tf:"snapshot_source,omitempty"`

	// Choose the configuration strategy used to apply the changes.
	// Configuration strategy settings.
	Strategy []StrategyObservation `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// Optional topology element which must be set once but can be set multiple times to compose complex topologies
	Topology []ElasticsearchTopologyObservation `json:"topology,omitempty" tf:"topology,omitempty"`

	// The trust relationships with other ESS accounts.
	// Optional Elasticsearch account trust settings.
	TrustAccount []TrustAccountObservation `json:"trustAccount,omitempty" tf:"trust_account,omitempty"`

	// The trust relationship with external entities (remote environments, remote accounts...).
	// Optional Elasticsearch external trust settings.
	TrustExternal []TrustExternalObservation `json:"trustExternal,omitempty" tf:"trust_external,omitempty"`
}

type ElasticsearchParameters struct {

	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	// Enable or disable autoscaling. Defaults to the setting coming from the deployment template. Accepted values are "true" or "false".
	// +kubebuilder:validation:Optional
	Autoscale *string `json:"autoscale,omitempty" tf:"autoscale,omitempty"`

	// Elasticsearch settings applied to all topologies unless overridden in the topology element.
	// Optional Elasticsearch settings which will be applied to all topologies unless overridden on the topology element
	// +kubebuilder:validation:Optional
	Config []ElasticsearchConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// Custom Elasticsearch bundles or plugins. Can be set multiple times.
	// Optional Elasticsearch extensions such as custom bundles or plugins.
	// +kubebuilder:validation:Optional
	Extension []ExtensionParameters `json:"extension,omitempty" tf:"extension,omitempty"`

	// Can be set on the Elasticsearch resource. The default value main-elasticsearch is recommended.
	// Optional ref_id to set on the Elasticsearch resource
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch remote clusters to configure for the Elasticsearch resource. Can be set multiple times.
	// Optional Elasticsearch remote clusters to configure for the Elasticsearch resource, can be set multiple times
	// +kubebuilder:validation:Optional
	RemoteCluster []RemoteClusterParameters `json:"remoteCluster,omitempty" tf:"remote_cluster,omitempty"`

	// Restores data from a snapshot of another deployment.
	// Optional snapshot source settings. Restore data from a snapshot of another deployment.
	// +kubebuilder:validation:Optional
	SnapshotSource []SnapshotSourceParameters `json:"snapshotSource,omitempty" tf:"snapshot_source,omitempty"`

	// Choose the configuration strategy used to apply the changes.
	// Configuration strategy settings.
	// +kubebuilder:validation:Optional
	Strategy []StrategyParameters `json:"strategy,omitempty" tf:"strategy,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// Optional topology element which must be set once but can be set multiple times to compose complex topologies
	// +kubebuilder:validation:Optional
	Topology []ElasticsearchTopologyParameters `json:"topology,omitempty" tf:"topology,omitempty"`

	// The trust relationships with other ESS accounts.
	// Optional Elasticsearch account trust settings.
	// +kubebuilder:validation:Optional
	TrustAccount []TrustAccountParameters `json:"trustAccount,omitempty" tf:"trust_account,omitempty"`

	// The trust relationship with external entities (remote environments, remote accounts...).
	// Optional Elasticsearch external trust settings.
	// +kubebuilder:validation:Optional
	TrustExternal []TrustExternalParameters `json:"trustExternal,omitempty" tf:"trust_external,omitempty"`
}

type ElasticsearchTopologyInitParameters struct {

	// Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the autoscaling block.
	// Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
	Autoscaling []AutoscalingInitParameters `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// Unique topology identifier. It generally refers to an Elasticsearch data tier, such as hot_content, warm, cold, coordinating, frozen, ml or master.
	// Required topology ID from the deployment template
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The node type for the Elasticsearch cluster (data node).
	// The node type for the Elasticsearch Topology element (data node)
	NodeTypeData *string `json:"nodeTypeData,omitempty" tf:"node_type_data,omitempty"`

	// The node type for the Elasticsearch cluster (ingest node).
	// The node type for the Elasticsearch Topology element (ingest node)
	NodeTypeIngest *string `json:"nodeTypeIngest,omitempty" tf:"node_type_ingest,omitempty"`

	// The node type for the Elasticsearch cluster (machine learning node).
	// The node type for the Elasticsearch Topology element (machine learning node)
	NodeTypeML *string `json:"nodeTypeMl,omitempty" tf:"node_type_ml,omitempty"`

	// The node type for the Elasticsearch cluster (master node).
	// The node type for the Elasticsearch Topology element (master node)
	NodeTypeMaster *string `json:"nodeTypeMaster,omitempty" tf:"node_type_master,omitempty"`

	// Amount in Gigabytes per topology element in the "<size in GB>g" notation. When omitted, it defaults to the deployment template value.
	// Optional amount of memory per node in the "<size in GB>g" notation
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
	// Optional number of zones that the Elasticsearch cluster will span. This is used to set HA
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type ElasticsearchTopologyObservation struct {

	// Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the autoscaling block.
	// Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
	Autoscaling []AutoscalingObservation `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// Kibana settings applied to all topologies unless overridden in the topology element.
	// Computed read-only configuration to avoid unsetting plan settings from 'topology.elasticsearch'
	Config []TopologyConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// Unique topology identifier. It generally refers to an Elasticsearch data tier, such as hot_content, warm, cold, coordinating, frozen, ml or master.
	// Required topology ID from the deployment template
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Default instance configuration of the deployment template. No need to change this value since Kibana has only one instance type.
	// Computed Instance Configuration ID of the topology element
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// List of roles for the topology element. They are inferred from the deployment template.
	// The computed list of node roles for the current topology element
	// +listType=set
	NodeRoles []*string `json:"nodeRoles,omitempty" tf:"node_roles,omitempty"`

	// The node type for the Elasticsearch cluster (data node).
	// The node type for the Elasticsearch Topology element (data node)
	NodeTypeData *string `json:"nodeTypeData,omitempty" tf:"node_type_data,omitempty"`

	// The node type for the Elasticsearch cluster (ingest node).
	// The node type for the Elasticsearch Topology element (ingest node)
	NodeTypeIngest *string `json:"nodeTypeIngest,omitempty" tf:"node_type_ingest,omitempty"`

	// The node type for the Elasticsearch cluster (machine learning node).
	// The node type for the Elasticsearch Topology element (machine learning node)
	NodeTypeML *string `json:"nodeTypeMl,omitempty" tf:"node_type_ml,omitempty"`

	// The node type for the Elasticsearch cluster (master node).
	// The node type for the Elasticsearch Topology element (master node)
	NodeTypeMaster *string `json:"nodeTypeMaster,omitempty" tf:"node_type_master,omitempty"`

	// Amount in Gigabytes per topology element in the "<size in GB>g" notation. When omitted, it defaults to the deployment template value.
	// Optional amount of memory per node in the "<size in GB>g" notation
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
	// Optional number of zones that the Elasticsearch cluster will span. This is used to set HA
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type ElasticsearchTopologyParameters struct {

	// Autoscaling policy defining the maximum and / or minimum total size for this topology element. For more information refer to the autoscaling block.
	// Optional Elasticsearch autoscaling settings, such a maximum and minimum size and resources.
	// +kubebuilder:validation:Optional
	Autoscaling []AutoscalingParameters `json:"autoscaling,omitempty" tf:"autoscaling,omitempty"`

	// Unique topology identifier. It generally refers to an Elasticsearch data tier, such as hot_content, warm, cold, coordinating, frozen, ml or master.
	// Required topology ID from the deployment template
	// +kubebuilder:validation:Optional
	ID *string `json:"id" tf:"id,omitempty"`

	// The node type for the Elasticsearch cluster (data node).
	// The node type for the Elasticsearch Topology element (data node)
	// +kubebuilder:validation:Optional
	NodeTypeData *string `json:"nodeTypeData,omitempty" tf:"node_type_data,omitempty"`

	// The node type for the Elasticsearch cluster (ingest node).
	// The node type for the Elasticsearch Topology element (ingest node)
	// +kubebuilder:validation:Optional
	NodeTypeIngest *string `json:"nodeTypeIngest,omitempty" tf:"node_type_ingest,omitempty"`

	// The node type for the Elasticsearch cluster (machine learning node).
	// The node type for the Elasticsearch Topology element (machine learning node)
	// +kubebuilder:validation:Optional
	NodeTypeML *string `json:"nodeTypeMl,omitempty" tf:"node_type_ml,omitempty"`

	// The node type for the Elasticsearch cluster (master node).
	// The node type for the Elasticsearch Topology element (master node)
	// +kubebuilder:validation:Optional
	NodeTypeMaster *string `json:"nodeTypeMaster,omitempty" tf:"node_type_master,omitempty"`

	// Amount in Gigabytes per topology element in the "<size in GB>g" notation. When omitted, it defaults to the deployment template value.
	// Optional amount of memory per node in the "<size in GB>g" notation
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	// +kubebuilder:validation:Optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones the instance type of the Elasticsearch cluster will span. This is used to set or unset HA on an Elasticsearch node type. When omitted, it defaults to the deployment template value.
	// Optional number of zones that the Elasticsearch cluster will span. This is used to set HA
	// +kubebuilder:validation:Optional
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type EnterpriseSearchConfigInitParameters struct {

	// Optionally override the docker image the Enterprise Search nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level enterprise_search.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level enterprise_search.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level enterprise_search.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level enterprise_search.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type EnterpriseSearchConfigObservation struct {

	// Optionally override the docker image the Enterprise Search nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level enterprise_search.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level enterprise_search.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level enterprise_search.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level enterprise_search.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type EnterpriseSearchConfigParameters struct {

	// Optionally override the docker image the Enterprise Search nodes will use. Note that this field will only work for internal users only.
	// +kubebuilder:validation:Optional
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level enterprise_search.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level enterprise_search.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level enterprise_search.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level enterprise_search.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type EnterpriseSearchInitParameters struct {

	// Enterprise Search settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Enterprise Search configuration options for the Enterprise Search Server
	Config []EnterpriseSearchConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the Enterprise Search resource. The default value main-enterprise_search is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []EnterpriseSearchTopologyInitParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type EnterpriseSearchObservation struct {

	// Enterprise Search settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Enterprise Search configuration options for the Enterprise Search Server
	Config []EnterpriseSearchConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Kibana resource HTTP endpoint.
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// Kibana resource HTTPs endpoint.
	HTTPSEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint,omitempty"`

	// Can be set on the Enterprise Search resource. The default value main-enterprise_search is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Kibana resource unique identifier.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []EnterpriseSearchTopologyObservation `json:"topology,omitempty" tf:"topology,omitempty"`
}

type EnterpriseSearchParameters struct {

	// Enterprise Search settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Enterprise Search configuration options for the Enterprise Search Server
	// +kubebuilder:validation:Optional
	Config []EnterpriseSearchConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	// +kubebuilder:validation:Optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the Enterprise Search resource. The default value main-enterprise_search is recommended.
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// +kubebuilder:validation:Optional
	Topology []EnterpriseSearchTopologyParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type EnterpriseSearchTopologyInitParameters struct {

	// Default instance configuration of the deployment template. To change it, use the full list of regions and deployment templates available in ESS.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Enterprise Search deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type EnterpriseSearchTopologyObservation struct {

	// Default instance configuration of the deployment template. To change it, use the full list of regions and deployment templates available in ESS.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Node type (Appserver) for the Enterprise Search topology element.
	NodeTypeAppserver *bool `json:"nodeTypeAppserver,omitempty" tf:"node_type_appserver,omitempty"`

	// Node type (Connector) for the Enterprise Search topology element.
	NodeTypeConnector *bool `json:"nodeTypeConnector,omitempty" tf:"node_type_connector,omitempty"`

	// Node type (worker) for the Enterprise Search topology element.
	NodeTypeWorker *bool `json:"nodeTypeWorker,omitempty" tf:"node_type_worker,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Enterprise Search deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type EnterpriseSearchTopologyParameters struct {

	// Default instance configuration of the deployment template. To change it, use the full list of regions and deployment templates available in ESS.
	// +kubebuilder:validation:Optional
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	// +kubebuilder:validation:Optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Enterprise Search deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type ExtensionInitParameters struct {

	// Extension name.
	// Extension name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Extension type, only bundle or plugin are supported.
	// Extension type, only `bundle` or `plugin` are supported.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Bundle or plugin URL, the extension URL can be obtained from the ec_deployment_extension.<name>.url attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	// Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as 7.* or * but plugins must use full version notation down to the patch level, such as 7.10.1 and wildcards are not allowed.
	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExtensionObservation struct {

	// Extension name.
	// Extension name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Extension type, only bundle or plugin are supported.
	// Extension type, only `bundle` or `plugin` are supported.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Bundle or plugin URL, the extension URL can be obtained from the ec_deployment_extension.<name>.url attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	// Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as 7.* or * but plugins must use full version notation down to the patch level, such as 7.10.1 and wildcards are not allowed.
	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExtensionParameters struct {

	// Extension name.
	// Extension name.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// Extension type, only bundle or plugin are supported.
	// Extension type, only `bundle` or `plugin` are supported.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// Bundle or plugin URL, the extension URL can be obtained from the ec_deployment_extension.<name>.url attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	// Bundle or plugin URL, the extension URL can be obtained from the `ec_deployment_extension.<name>.url` attribute or the API and cannot be a random HTTP address that is hosted elsewhere.
	// +kubebuilder:validation:Optional
	URL *string `json:"url" tf:"url,omitempty"`

	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as 7.* or * but plugins must use full version notation down to the patch level, such as 7.10.1 and wildcards are not allowed.
	// Elasticsearch compatibility version. Bundles should specify major or minor versions with wildcards, such as `7.*` or `*` but **plugins must use full version notation down to the patch level**, such as `7.10.1` and wildcards are not allowed.
	// +kubebuilder:validation:Optional
	Version *string `json:"version" tf:"version,omitempty"`
}

type IntegrationsServerConfigInitParameters struct {

	// Enable debug mode for the component. Defaults to false.
	// Optionally enable debug mode for IntegrationsServer servers - defaults to false
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled,omitempty"`

	// Optionally override the docker image the IntegrationsServer nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type IntegrationsServerConfigObservation struct {

	// Enable debug mode for the component. Defaults to false.
	// Optionally enable debug mode for IntegrationsServer servers - defaults to false
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled,omitempty"`

	// Optionally override the docker image the IntegrationsServer nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type IntegrationsServerConfigParameters struct {

	// Enable debug mode for the component. Defaults to false.
	// Optionally enable debug mode for IntegrationsServer servers - defaults to false
	// +kubebuilder:validation:Optional
	DebugEnabled *bool `json:"debugEnabled,omitempty" tf:"debug_enabled,omitempty"`

	// Optionally override the docker image the IntegrationsServer nodes will use. Note that this field will only work for internal users only.
	// +kubebuilder:validation:Optional
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type IntegrationsServerInitParameters struct {

	// Integrations Server settings applied to all topologies unless overridden in the topology element.
	// Optionally define the IntegrationsServer configuration options for the IntegrationsServer Server
	Config []IntegrationsServerConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the Integrations Server resource. The default value main-integrations_server is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []IntegrationsServerTopologyInitParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type IntegrationsServerObservation struct {

	// HTTPs endpoint for APM Server.
	ApmHTTPSEndpoint *string `json:"apmHttpsEndpoint,omitempty" tf:"apm_https_endpoint,omitempty"`

	// Integrations Server settings applied to all topologies unless overridden in the topology element.
	// Optionally define the IntegrationsServer configuration options for the IntegrationsServer Server
	Config []IntegrationsServerConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// HTTPs endpoint for Fleet Server.
	FleetHTTPSEndpoint *string `json:"fleetHttpsEndpoint,omitempty" tf:"fleet_https_endpoint,omitempty"`

	// Kibana resource HTTP endpoint.
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// Kibana resource HTTPs endpoint.
	HTTPSEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint,omitempty"`

	// Can be set on the Integrations Server resource. The default value main-integrations_server is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Kibana resource unique identifier.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []IntegrationsServerTopologyObservation `json:"topology,omitempty" tf:"topology,omitempty"`
}

type IntegrationsServerParameters struct {

	// Integrations Server settings applied to all topologies unless overridden in the topology element.
	// Optionally define the IntegrationsServer configuration options for the IntegrationsServer Server
	// +kubebuilder:validation:Optional
	Config []IntegrationsServerConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	// +kubebuilder:validation:Optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the Integrations Server resource. The default value main-integrations_server is recommended.
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// +kubebuilder:validation:Optional
	Topology []IntegrationsServerTopologyParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type IntegrationsServerTopologyInitParameters struct {

	// Default instance configuration of the deployment template. No need to change this value since Integrations Server has only one instance type.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Integrations Server deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type IntegrationsServerTopologyObservation struct {

	// Default instance configuration of the deployment template. No need to change this value since Integrations Server has only one instance type.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Integrations Server deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type IntegrationsServerTopologyParameters struct {

	// Default instance configuration of the deployment template. No need to change this value since Integrations Server has only one instance type.
	// +kubebuilder:validation:Optional
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	// +kubebuilder:validation:Optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Integrations Server deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type KibanaConfigInitParameters struct {

	// Optionally override the docker image the Kibana nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type KibanaConfigObservation struct {

	// Optionally override the docker image the Kibana nodes will use. Note that this field will only work for internal users only.
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type KibanaConfigParameters struct {

	// Optionally override the docker image the Kibana nodes will use. Note that this field will only work for internal users only.
	// +kubebuilder:validation:Optional
	DockerImage *string `json:"dockerImage,omitempty" tf:"docker_image,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	// An arbitrary JSON object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_yaml' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (This field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary JSON object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_yaml' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	// An arbitrary YAML object allowing (non-admin) cluster owners to set their parameters (only one of this and 'user_settings_json' is allowed), provided they are on the whitelist ('user_settings_whitelist') and not on the blacklist ('user_settings_blacklist'). (These field together with 'user_settings_override*' and 'system_settings' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	// An arbitrary YAML object allowing ECE admins owners to set clusters' parameters (only one of this and 'user_settings_override_json' is allowed), ie in addition to the documented 'system_settings'. (This field together with 'system_settings' and 'user_settings*' defines the total set of resource settings)
	// +kubebuilder:validation:Optional
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type KibanaInitParameters struct {

	// Kibana settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Kibana configuration options for the Kibana Server
	Config []KibanaConfigInitParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the Kibana resource. The default value main-kibana is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []KibanaTopologyInitParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type KibanaObservation struct {

	// Kibana settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Kibana configuration options for the Kibana Server
	Config []KibanaConfigObservation `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Kibana resource HTTP endpoint.
	HTTPEndpoint *string `json:"httpEndpoint,omitempty" tf:"http_endpoint,omitempty"`

	// Kibana resource HTTPs endpoint.
	HTTPSEndpoint *string `json:"httpsEndpoint,omitempty" tf:"https_endpoint,omitempty"`

	// Can be set on the Kibana resource. The default value main-kibana is recommended.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Elasticsearch Service (ESS) region where to create the deployment. For Elastic Cloud Enterprise (ECE) installations, set "ece-region".
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Kibana resource unique identifier.
	ResourceID *string `json:"resourceId,omitempty" tf:"resource_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	Topology []KibanaTopologyObservation `json:"topology,omitempty" tf:"topology,omitempty"`
}

type KibanaParameters struct {

	// Kibana settings applied to all topologies unless overridden in the topology element.
	// Optionally define the Kibana configuration options for the Kibana Server
	// +kubebuilder:validation:Optional
	Config []KibanaConfigParameters `json:"config,omitempty" tf:"config,omitempty"`

	// This field references the ref_id of the deployment Elasticsearch cluster. The default value main-elasticsearch is recommended.
	// +kubebuilder:validation:Optional
	ElasticsearchClusterRefID *string `json:"elasticsearchClusterRefId,omitempty" tf:"elasticsearch_cluster_ref_id,omitempty"`

	// Can be set on the Kibana resource. The default value main-kibana is recommended.
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// Can be set multiple times to compose complex topologies.
	// +kubebuilder:validation:Optional
	Topology []KibanaTopologyParameters `json:"topology,omitempty" tf:"topology,omitempty"`
}

type KibanaTopologyInitParameters struct {

	// Default instance configuration of the deployment template. No need to change this value since Kibana has only one instance type.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Kibana deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type KibanaTopologyObservation struct {

	// Default instance configuration of the deployment template. No need to change this value since Kibana has only one instance type.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Kibana deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type KibanaTopologyParameters struct {

	// Default instance configuration of the deployment template. No need to change this value since Kibana has only one instance type.
	// +kubebuilder:validation:Optional
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	// +kubebuilder:validation:Optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the Kibana deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type ObservabilityInitParameters struct {

	// Destination deployment ID for the shipped logs and monitoring metrics. Use self as destination deployment ID to target the current deployment.
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// Enables or disables shipping logs. Defaults to true.
	Logs *bool `json:"logs,omitempty" tf:"logs,omitempty"`

	// Enables or disables shipping metrics. Defaults to true.
	Metrics *bool `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Elasticsearch resource kind ref_id of the destination deployment.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`
}

type ObservabilityObservation struct {

	// Destination deployment ID for the shipped logs and monitoring metrics. Use self as destination deployment ID to target the current deployment.
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// Enables or disables shipping logs. Defaults to true.
	Logs *bool `json:"logs,omitempty" tf:"logs,omitempty"`

	// Enables or disables shipping metrics. Defaults to true.
	Metrics *bool `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Elasticsearch resource kind ref_id of the destination deployment.
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`
}

type ObservabilityParameters struct {

	// Destination deployment ID for the shipped logs and monitoring metrics. Use self as destination deployment ID to target the current deployment.
	// +kubebuilder:validation:Optional
	DeploymentID *string `json:"deploymentId" tf:"deployment_id,omitempty"`

	// Enables or disables shipping logs. Defaults to true.
	// +kubebuilder:validation:Optional
	Logs *bool `json:"logs,omitempty" tf:"logs,omitempty"`

	// Enables or disables shipping metrics. Defaults to true.
	// +kubebuilder:validation:Optional
	Metrics *bool `json:"metrics,omitempty" tf:"metrics,omitempty"`

	// Elasticsearch resource kind ref_id of the destination deployment.
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`
}

type RemoteClusterInitParameters struct {

	// Alias for the Cross Cluster Search binding.
	// Alias for this Cross Cluster Search binding
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Remote deployment ID.
	// Remote deployment ID
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// elasticsearch is recommended.
	// Remote elasticsearch "ref_id", it is best left to the default value
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// If true, skip the cluster during search when disconnected. Defaults to false.
	// If true, skip the cluster during search when disconnected
	SkipUnavailable *bool `json:"skipUnavailable,omitempty" tf:"skip_unavailable,omitempty"`
}

type RemoteClusterObservation struct {

	// Alias for the Cross Cluster Search binding.
	// Alias for this Cross Cluster Search binding
	Alias *string `json:"alias,omitempty" tf:"alias,omitempty"`

	// Remote deployment ID.
	// Remote deployment ID
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// elasticsearch is recommended.
	// Remote elasticsearch "ref_id", it is best left to the default value
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// If true, skip the cluster during search when disconnected. Defaults to false.
	// If true, skip the cluster during search when disconnected
	SkipUnavailable *bool `json:"skipUnavailable,omitempty" tf:"skip_unavailable,omitempty"`
}

type RemoteClusterParameters struct {

	// Alias for the Cross Cluster Search binding.
	// Alias for this Cross Cluster Search binding
	// +kubebuilder:validation:Optional
	Alias *string `json:"alias" tf:"alias,omitempty"`

	// Remote deployment ID.
	// Remote deployment ID
	// +kubebuilder:validation:Optional
	DeploymentID *string `json:"deploymentId" tf:"deployment_id,omitempty"`

	// elasticsearch is recommended.
	// Remote elasticsearch "ref_id", it is best left to the default value
	// +kubebuilder:validation:Optional
	RefID *string `json:"refId,omitempty" tf:"ref_id,omitempty"`

	// If true, skip the cluster during search when disconnected. Defaults to false.
	// If true, skip the cluster during search when disconnected
	// +kubebuilder:validation:Optional
	SkipUnavailable *bool `json:"skipUnavailable,omitempty" tf:"skip_unavailable,omitempty"`
}

type SnapshotSourceInitParameters struct {

	// Name of the snapshot to restore. Use __latest_success__ to get the most recent successful snapshot (Defaults to __latest_success__).
	// Name of the snapshot to restore. Use '__latest_success__' to get the most recent successful snapshot.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
	// ID of the Elasticsearch cluster that will be used as the source of the snapshot
	SourceElasticsearchClusterID *string `json:"sourceElasticsearchClusterId,omitempty" tf:"source_elasticsearch_cluster_id,omitempty"`
}

type SnapshotSourceObservation struct {

	// Name of the snapshot to restore. Use __latest_success__ to get the most recent successful snapshot (Defaults to __latest_success__).
	// Name of the snapshot to restore. Use '__latest_success__' to get the most recent successful snapshot.
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
	// ID of the Elasticsearch cluster that will be used as the source of the snapshot
	SourceElasticsearchClusterID *string `json:"sourceElasticsearchClusterId,omitempty" tf:"source_elasticsearch_cluster_id,omitempty"`
}

type SnapshotSourceParameters struct {

	// Name of the snapshot to restore. Use __latest_success__ to get the most recent successful snapshot (Defaults to __latest_success__).
	// Name of the snapshot to restore. Use '__latest_success__' to get the most recent successful snapshot.
	// +kubebuilder:validation:Optional
	SnapshotName *string `json:"snapshotName,omitempty" tf:"snapshot_name,omitempty"`

	// ID of the Elasticsearch cluster, not to be confused with the deployment ID, that will be used as the source of the snapshot. The Elasticsearch cluster must be in the same region and must have a compatible version of the Elastic Stack.
	// ID of the Elasticsearch cluster that will be used as the source of the snapshot
	// +kubebuilder:validation:Optional
	SourceElasticsearchClusterID *string `json:"sourceElasticsearchClusterId" tf:"source_elasticsearch_cluster_id,omitempty"`
}

type StrategyInitParameters struct {

	// Set the type of configuration strategy [autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all].
	// Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StrategyObservation struct {

	// Set the type of configuration strategy [autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all].
	// Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StrategyParameters struct {

	// Set the type of configuration strategy [autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all].
	// Configuration strategy type autodetect, grow_and_shrink, rolling_grow_and_shrink, rolling_all
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type TopologyConfigInitParameters struct {
}

type TopologyConfigObservation struct {

	// List of Elasticsearch supported plugins. Check the Stack Pack version to see which plugins are supported for each version. This is currently only available from the UI and ecctl.
	// +listType=set
	Plugins []*string `json:"plugins,omitempty" tf:"plugins,omitempty"`

	// JSON-formatted user level kibana.yml setting overrides.
	UserSettingsJSON *string `json:"userSettingsJson,omitempty" tf:"user_settings_json,omitempty"`

	// JSON-formatted admin (ECE) level kibana.yml setting overrides.
	UserSettingsOverrideJSON *string `json:"userSettingsOverrideJson,omitempty" tf:"user_settings_override_json,omitempty"`

	// YAML-formatted admin (ECE) level kibana.yml setting overrides.
	UserSettingsOverrideYaml *string `json:"userSettingsOverrideYaml,omitempty" tf:"user_settings_override_yaml,omitempty"`

	// YAML-formatted user level kibana.yml setting overrides.
	UserSettingsYaml *string `json:"userSettingsYaml,omitempty" tf:"user_settings_yaml,omitempty"`
}

type TopologyConfigParameters struct {
}

type TopologyInitParameters struct {

	// Default instance configuration of the deployment template. No need to change this value since APM has only one instance type.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the APM deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type TopologyObservation struct {

	// Default instance configuration of the deployment template. No need to change this value since APM has only one instance type.
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the APM deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type TopologyParameters struct {

	// Default instance configuration of the deployment template. No need to change this value since APM has only one instance type.
	// +kubebuilder:validation:Optional
	InstanceConfigurationID *string `json:"instanceConfigurationId,omitempty" tf:"instance_configuration_id,omitempty"`

	// Amount of memory (RAM) per topology element in the "g" notation. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	Size *string `json:"size,omitempty" tf:"size,omitempty"`

	// Type of resource to which the size is assigned. Defaults to "memory".
	// Optional size type, defaults to "memory".
	// +kubebuilder:validation:Optional
	SizeResource *string `json:"sizeResource,omitempty" tf:"size_resource,omitempty"`

	// Number of zones that the APM deployment will span. This is used to set HA. When omitted, it defaults to the deployment template value.
	// +kubebuilder:validation:Optional
	ZoneCount *float64 `json:"zoneCount,omitempty" tf:"zone_count,omitempty"`
}

type TrustAccountInitParameters struct {

	// The account identifier to establish the new trust with.
	// The ID of the Account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// If true, all clusters in this account will by default be trusted and the trust_allowlist is ignored.
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	TrustAll *bool `json:"trustAll,omitempty" tf:"trust_all,omitempty"`

	// The list of clusters to trust. Only used when trust_all is false.
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +listType=set
	TrustAllowlist []*string `json:"trustAllowlist,omitempty" tf:"trust_allowlist,omitempty"`
}

type TrustAccountObservation struct {

	// The account identifier to establish the new trust with.
	// The ID of the Account.
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// If true, all clusters in this account will by default be trusted and the trust_allowlist is ignored.
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	TrustAll *bool `json:"trustAll,omitempty" tf:"trust_all,omitempty"`

	// The list of clusters to trust. Only used when trust_all is false.
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +listType=set
	TrustAllowlist []*string `json:"trustAllowlist,omitempty" tf:"trust_allowlist,omitempty"`
}

type TrustAccountParameters struct {

	// The account identifier to establish the new trust with.
	// The ID of the Account.
	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId" tf:"account_id,omitempty"`

	// If true, all clusters in this account will by default be trusted and the trust_allowlist is ignored.
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	// +kubebuilder:validation:Optional
	TrustAll *bool `json:"trustAll" tf:"trust_all,omitempty"`

	// The list of clusters to trust. Only used when trust_all is false.
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +kubebuilder:validation:Optional
	// +listType=set
	TrustAllowlist []*string `json:"trustAllowlist,omitempty" tf:"trust_allowlist,omitempty"`
}

type TrustExternalInitParameters struct {

	// Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
	// The ID of the external trust relationship.
	RelationshipID *string `json:"relationshipId,omitempty" tf:"relationship_id,omitempty"`

	// If true, all clusters in this external entity will be trusted and the trust_allowlist is ignored.
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	TrustAll *bool `json:"trustAll,omitempty" tf:"trust_all,omitempty"`

	// The list of clusters to trust. Only used when trust_all is false.
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +listType=set
	TrustAllowlist []*string `json:"trustAllowlist,omitempty" tf:"trust_allowlist,omitempty"`
}

type TrustExternalObservation struct {

	// Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
	// The ID of the external trust relationship.
	RelationshipID *string `json:"relationshipId,omitempty" tf:"relationship_id,omitempty"`

	// If true, all clusters in this external entity will be trusted and the trust_allowlist is ignored.
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	TrustAll *bool `json:"trustAll,omitempty" tf:"trust_all,omitempty"`

	// The list of clusters to trust. Only used when trust_all is false.
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +listType=set
	TrustAllowlist []*string `json:"trustAllowlist,omitempty" tf:"trust_allowlist,omitempty"`
}

type TrustExternalParameters struct {

	// Identifier of the the trust relationship with external entities (remote environments, remote accounts...).
	// The ID of the external trust relationship.
	// +kubebuilder:validation:Optional
	RelationshipID *string `json:"relationshipId" tf:"relationship_id,omitempty"`

	// If true, all clusters in this external entity will be trusted and the trust_allowlist is ignored.
	// If true, all clusters in this account will by default be trusted and the `trust_allowlist` is ignored.
	// +kubebuilder:validation:Optional
	TrustAll *bool `json:"trustAll" tf:"trust_all,omitempty"`

	// The list of clusters to trust. Only used when trust_all is false.
	// The list of clusters to trust. Only used when `trust_all` is false.
	// +kubebuilder:validation:Optional
	// +listType=set
	TrustAllowlist []*string `json:"trustAllowlist,omitempty" tf:"trust_allowlist,omitempty"`
}

// DeploymentSpec defines the desired state of Deployment
type DeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DeploymentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DeploymentInitParameters `json:"initProvider,omitempty"`
}

// DeploymentStatus defines the observed state of Deployment.
type DeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Deployment is the Schema for the Deployments API. Provides an Elastic Cloud deployment resource, which allows deployments to be created, updated, and deleted.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,ec}
type Deployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.deploymentTemplateId) || (has(self.initProvider) && has(self.initProvider.deploymentTemplateId))",message="spec.forProvider.deploymentTemplateId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.elasticsearch) || (has(self.initProvider) && has(self.initProvider.elasticsearch))",message="spec.forProvider.elasticsearch is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   DeploymentSpec   `json:"spec"`
	Status DeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeploymentList contains a list of Deployments
type DeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Deployment `json:"items"`
}

// Repository type metadata.
var (
	Deployment_Kind             = "Deployment"
	Deployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Deployment_Kind}.String()
	Deployment_KindAPIVersion   = Deployment_Kind + "." + CRDGroupVersion.String()
	Deployment_GroupVersionKind = CRDGroupVersion.WithKind(Deployment_Kind)
)

func init() {
	SchemeBuilder.Register(&Deployment{}, &DeploymentList{})
}
