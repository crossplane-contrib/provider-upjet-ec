/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TrafficFilterAssociationInitParameters struct {

	// Deployment ID of the deployment to which the traffic filter rule is attached.
	// Required deployment ID where the traffic filter will be associated
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// Traffic filter ID of the rule to use for the attachment.
	// Required traffic filter ruleset ID to tie to a deployment
	TrafficFilterID *string `json:"trafficFilterId,omitempty" tf:"traffic_filter_id,omitempty"`
}

type TrafficFilterAssociationObservation struct {

	// Deployment ID of the deployment to which the traffic filter rule is attached.
	// Required deployment ID where the traffic filter will be associated
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// An autogenerated ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Traffic filter ID of the rule to use for the attachment.
	// Required traffic filter ruleset ID to tie to a deployment
	TrafficFilterID *string `json:"trafficFilterId,omitempty" tf:"traffic_filter_id,omitempty"`
}

type TrafficFilterAssociationParameters struct {

	// Deployment ID of the deployment to which the traffic filter rule is attached.
	// Required deployment ID where the traffic filter will be associated
	// +kubebuilder:validation:Optional
	DeploymentID *string `json:"deploymentId,omitempty" tf:"deployment_id,omitempty"`

	// Traffic filter ID of the rule to use for the attachment.
	// Required traffic filter ruleset ID to tie to a deployment
	// +kubebuilder:validation:Optional
	TrafficFilterID *string `json:"trafficFilterId,omitempty" tf:"traffic_filter_id,omitempty"`
}

// TrafficFilterAssociationSpec defines the desired state of TrafficFilterAssociation
type TrafficFilterAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficFilterAssociationParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrafficFilterAssociationInitParameters `json:"initProvider,omitempty"`
}

// TrafficFilterAssociationStatus defines the observed state of TrafficFilterAssociation.
type TrafficFilterAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficFilterAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrafficFilterAssociation is the Schema for the TrafficFilterAssociations API.  Associations can be created and deleted.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticcloud}
type TrafficFilterAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.deploymentId) || (has(self.initProvider) && has(self.initProvider.deploymentId))",message="spec.forProvider.deploymentId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.trafficFilterId) || (has(self.initProvider) && has(self.initProvider.trafficFilterId))",message="spec.forProvider.trafficFilterId is a required parameter"
	Spec   TrafficFilterAssociationSpec   `json:"spec"`
	Status TrafficFilterAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficFilterAssociationList contains a list of TrafficFilterAssociations
type TrafficFilterAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficFilterAssociation `json:"items"`
}

// Repository type metadata.
var (
	TrafficFilterAssociation_Kind             = "TrafficFilterAssociation"
	TrafficFilterAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrafficFilterAssociation_Kind}.String()
	TrafficFilterAssociation_KindAPIVersion   = TrafficFilterAssociation_Kind + "." + CRDGroupVersion.String()
	TrafficFilterAssociation_GroupVersionKind = CRDGroupVersion.WithKind(TrafficFilterAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&TrafficFilterAssociation{}, &TrafficFilterAssociationList{})
}
