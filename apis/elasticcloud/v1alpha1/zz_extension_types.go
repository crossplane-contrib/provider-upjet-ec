/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExtensionInitParameters_2 struct {

	// Description of the extension.
	// Description for extension
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The URL to download the extension archive.
	// download url
	DownloadURL *string `json:"downloadUrl,omitempty" tf:"download_url,omitempty"`

	// bundle or plugin allowed. A bundle will usually contain a dictionary or script, where a plugin is compiled from source.
	// Extension type. bundle or plugin
	ExtensionType *string `json:"extensionType,omitempty" tf:"extension_type,omitempty"`

	// Hash value of the file. If it is changed, the file is reuploaded.
	// file hash
	FileHash *string `json:"fileHash,omitempty" tf:"file_hash,omitempty"`

	// File path of the extension uploaded.
	// file path
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// Name of the extension.
	// Required name of the ruleset
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	// Eleasticsearch version
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExtensionObservation_2 struct {

	// Description of the extension.
	// Description for extension
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The URL to download the extension archive.
	// download url
	DownloadURL *string `json:"downloadUrl,omitempty" tf:"download_url,omitempty"`

	// bundle or plugin allowed. A bundle will usually contain a dictionary or script, where a plugin is compiled from source.
	// Extension type. bundle or plugin
	ExtensionType *string `json:"extensionType,omitempty" tf:"extension_type,omitempty"`

	// Hash value of the file. If it is changed, the file is reuploaded.
	// file hash
	FileHash *string `json:"fileHash,omitempty" tf:"file_hash,omitempty"`

	// File path of the extension uploaded.
	// file path
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// Extension identifier.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The datetime the extension was last modified.
	LastModified *string `json:"lastModified,omitempty" tf:"last_modified,omitempty"`

	// Name of the extension.
	// Required name of the ruleset
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The extension file size in bytes.
	Size *float64 `json:"size,omitempty" tf:"size,omitempty"`

	// The extension URL to be used in the plan.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	// Eleasticsearch version
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ExtensionParameters_2 struct {

	// Description of the extension.
	// Description for extension
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The URL to download the extension archive.
	// download url
	// +kubebuilder:validation:Optional
	DownloadURL *string `json:"downloadUrl,omitempty" tf:"download_url,omitempty"`

	// bundle or plugin allowed. A bundle will usually contain a dictionary or script, where a plugin is compiled from source.
	// Extension type. bundle or plugin
	// +kubebuilder:validation:Optional
	ExtensionType *string `json:"extensionType,omitempty" tf:"extension_type,omitempty"`

	// Hash value of the file. If it is changed, the file is reuploaded.
	// file hash
	// +kubebuilder:validation:Optional
	FileHash *string `json:"fileHash,omitempty" tf:"file_hash,omitempty"`

	// File path of the extension uploaded.
	// file path
	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// Name of the extension.
	// Required name of the ruleset
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Elastic stack version, a numeric version for plugins, e.g. 2.3.0 should be set. Major version e.g. 2.*, or wildcards e.g. * for bundles.
	// Eleasticsearch version
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// ExtensionSpec defines the desired state of Extension
type ExtensionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExtensionParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ExtensionInitParameters_2 `json:"initProvider,omitempty"`
}

// ExtensionStatus defines the observed state of Extension.
type ExtensionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExtensionObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Extension is the Schema for the Extensions API. Provides an Elastic Cloud extension resource, which allows extensions to be created, updated, and deleted.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticcloud}
type Extension struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.extensionType) || (has(self.initProvider) && has(self.initProvider.extensionType))",message="spec.forProvider.extensionType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.version) || (has(self.initProvider) && has(self.initProvider.version))",message="spec.forProvider.version is a required parameter"
	Spec   ExtensionSpec   `json:"spec"`
	Status ExtensionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExtensionList contains a list of Extensions
type ExtensionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Extension `json:"items"`
}

// Repository type metadata.
var (
	Extension_Kind             = "Extension"
	Extension_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Extension_Kind}.String()
	Extension_KindAPIVersion   = Extension_Kind + "." + CRDGroupVersion.String()
	Extension_GroupVersionKind = CRDGroupVersion.WithKind(Extension_Kind)
)

func init() {
	SchemeBuilder.Register(&Extension{}, &ExtensionList{})
}
