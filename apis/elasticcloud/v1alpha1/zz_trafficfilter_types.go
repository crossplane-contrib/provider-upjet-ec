/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleInitParameters struct {

	// Azure endpoint GUID. Only applicable when the ruleset type is set to "azure_private_endpoint".
	// Optional Azure endpoint GUID
	AzureEndpointGUID *string `json:"azureEndpointGuid,omitempty" tf:"azure_endpoint_guid,omitempty"`

	// Azure endpoint name. Only applicable when the ruleset type is set to "azure_private_endpoint".
	// Optional Azure endpoint name
	AzureEndpointName *string `json:"azureEndpointName,omitempty" tf:"azure_endpoint_name,omitempty"`

	// Description of this individual rule.
	// Optional rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// traffic filter source: IP address, CIDR mask, or VPC endpoint ID, only required when the type is not "azure_private_endpoint".
	// Required traffic filter source: IP address, CIDR mask, or VPC endpoint ID, not required when the type is azure_private_endpoint
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type RuleObservation struct {

	// Azure endpoint GUID. Only applicable when the ruleset type is set to "azure_private_endpoint".
	// Optional Azure endpoint GUID
	AzureEndpointGUID *string `json:"azureEndpointGuid,omitempty" tf:"azure_endpoint_guid,omitempty"`

	// Azure endpoint name. Only applicable when the ruleset type is set to "azure_private_endpoint".
	// Optional Azure endpoint name
	AzureEndpointName *string `json:"azureEndpointName,omitempty" tf:"azure_endpoint_name,omitempty"`

	// Description of this individual rule.
	// Optional rule description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ruleset ID.
	// Computed rule ID
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// traffic filter source: IP address, CIDR mask, or VPC endpoint ID, only required when the type is not "azure_private_endpoint".
	// Required traffic filter source: IP address, CIDR mask, or VPC endpoint ID, not required when the type is azure_private_endpoint
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type RuleParameters struct {

	// Azure endpoint GUID. Only applicable when the ruleset type is set to "azure_private_endpoint".
	// Optional Azure endpoint GUID
	// +kubebuilder:validation:Optional
	AzureEndpointGUID *string `json:"azureEndpointGuid,omitempty" tf:"azure_endpoint_guid,omitempty"`

	// Azure endpoint name. Only applicable when the ruleset type is set to "azure_private_endpoint".
	// Optional Azure endpoint name
	// +kubebuilder:validation:Optional
	AzureEndpointName *string `json:"azureEndpointName,omitempty" tf:"azure_endpoint_name,omitempty"`

	// Description of this individual rule.
	// Optional rule description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// traffic filter source: IP address, CIDR mask, or VPC endpoint ID, only required when the type is not "azure_private_endpoint".
	// Required traffic filter source: IP address, CIDR mask, or VPC endpoint ID, not required when the type is azure_private_endpoint
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`
}

type TrafficFilterInitParameters struct {

	// Description of the ruleset.
	// Optional ruleset description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// To automatically include the ruleset in the new deployments. Defaults to false.
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault *bool `json:"includeByDefault,omitempty" tf:"include_by_default,omitempty"`

	// Name of the ruleset.
	// Required name of the ruleset
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Filter region, the ruleset can only be attached to deployments in the specific region.
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Rule block, which can be specified multiple times for multiple rules.
	// Required list of rules, which the ruleset is made of.
	Rule []RuleInitParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// Type of the ruleset.  It can be "ip", "vpce", "azure_private_endpoint", or "gcp_private_service_connect_endpoint".
	// Required type of the ruleset ("ip", "vpce", "azure_private_endpoint", or "gcp_private_service_connect_endpoint")
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TrafficFilterObservation struct {

	// Description of the ruleset.
	// Optional ruleset description
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The ruleset ID.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// To automatically include the ruleset in the new deployments. Defaults to false.
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	IncludeByDefault *bool `json:"includeByDefault,omitempty" tf:"include_by_default,omitempty"`

	// Name of the ruleset.
	// Required name of the ruleset
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Filter region, the ruleset can only be attached to deployments in the specific region.
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Rule block, which can be specified multiple times for multiple rules.
	// Required list of rules, which the ruleset is made of.
	Rule []RuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// Type of the ruleset.  It can be "ip", "vpce", "azure_private_endpoint", or "gcp_private_service_connect_endpoint".
	// Required type of the ruleset ("ip", "vpce", "azure_private_endpoint", or "gcp_private_service_connect_endpoint")
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TrafficFilterParameters struct {

	// Description of the ruleset.
	// Optional ruleset description
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// To automatically include the ruleset in the new deployments. Defaults to false.
	// Should the ruleset be automatically included in the new deployments (Defaults to false)
	// +kubebuilder:validation:Optional
	IncludeByDefault *bool `json:"includeByDefault,omitempty" tf:"include_by_default,omitempty"`

	// Name of the ruleset.
	// Required name of the ruleset
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Filter region, the ruleset can only be attached to deployments in the specific region.
	// Required filter region, the ruleset can only be attached to deployments in the specific region
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Rule block, which can be specified multiple times for multiple rules.
	// Required list of rules, which the ruleset is made of.
	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// Type of the ruleset.  It can be "ip", "vpce", "azure_private_endpoint", or "gcp_private_service_connect_endpoint".
	// Required type of the ruleset ("ip", "vpce", "azure_private_endpoint", or "gcp_private_service_connect_endpoint")
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// TrafficFilterSpec defines the desired state of TrafficFilter
type TrafficFilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TrafficFilterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TrafficFilterInitParameters `json:"initProvider,omitempty"`
}

// TrafficFilterStatus defines the observed state of TrafficFilter.
type TrafficFilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TrafficFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TrafficFilter is the Schema for the TrafficFilters API. Provides an Elastic Cloud traffic filter resource, which allows traffic filter rules to be created, updated, and deleted. Traffic filter rules are used to limit inbound traffic to deployment resources.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,elasticcloud}
type TrafficFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.region) || (has(self.initProvider) && has(self.initProvider.region))",message="spec.forProvider.region is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.rule) || (has(self.initProvider) && has(self.initProvider.rule))",message="spec.forProvider.rule is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   TrafficFilterSpec   `json:"spec"`
	Status TrafficFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrafficFilterList contains a list of TrafficFilters
type TrafficFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrafficFilter `json:"items"`
}

// Repository type metadata.
var (
	TrafficFilter_Kind             = "TrafficFilter"
	TrafficFilter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrafficFilter_Kind}.String()
	TrafficFilter_KindAPIVersion   = TrafficFilter_Kind + "." + CRDGroupVersion.String()
	TrafficFilter_GroupVersionKind = CRDGroupVersion.WithKind(TrafficFilter_Kind)
)

func init() {
	SchemeBuilder.Register(&TrafficFilter{}, &TrafficFilterList{})
}
